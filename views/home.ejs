<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/homeStyles.css">
    <link rel="stylesheet" href="https://unicons.iconscout.com/release/v4.0.0/css/line.css">
    <title>Muslim Daily</title>
</head>

<body>
    <header class="header-area">
        <!-- site-navbar  -->
        <%- include('partials/navbar') %>

            <div class="intro-area">
                <div class="container">
                    <div class="wrapper">
                        <h3 style="color: #20665C;  font-size: 30px;
                    font-weight: 500;
                    line-height: 50px;
                    margin-bottom: 10px;">Muslim Checklist</h3>
                        <p style="color: #20665C;margin-bottom: 25px;" id="crnt-date"></p>
                        <div class="task-input">
                            <img src="/images/bars-icon.png" alt="icon"
                                style="width:30px;color: linear-gradient(135deg, #108372 0%, #20665C 100%);">
                            <input type="text" placeholder="Add a new task">
                        </div>
                        <div class="controls">
                            <div class="filters">
                                <span class="active" id="all">All</span>
                                <span id="pending">Pending</span>
                                <span id="completed">Completed</span>
                            </div>
                            <button class="clear-btn">Clear All</button>
                        </div>
                        <ul class="task-box"></ul>
                    </div>
                </div>
            </div>
    </header>

    <script>

        /* update date */

        function updateDate() {

            const time = document.querySelector('#crnt-date');

            const formattedDate = new Intl.DateTimeFormat('en-u-ca-islamic-civil', {
                day: 'numeric',
                month: 'long',
                weekday: 'long',
                year: 'numeric',
                timeZone: 'Asia/Dhaka'
            }).format(Date.now());

            console.log(formattedDate);

            time.innerText = formattedDate;
        }

        setInterval(updateDate, 1000);

        /* todo script begin */

        const taskInput = document.querySelector(".task-input input"),
            filters = document.querySelectorAll(".filters span"),
            clearAll = document.querySelector(".clear-btn"),
            taskBox = document.querySelector(".task-box");

        let editId,
            isEditTask = false,
            todos = JSON.parse(localStorage.getItem("todo-list")) || [];

        filters.forEach(btn => {
            btn.addEventListener("click", () => {
                document.querySelector("span.active").classList.remove("active");
                btn.classList.add("active");
                showTodo(btn.id);
            });
        });

        function showTodo(filter) {
            let liTag = "";
            if (todos.length) {
                todos.forEach((todo, id) => {
                    let completed = todo.status === "completed" ? "checked" : "";
                    if (filter === todo.status || filter === "all") {
                        liTag += `<li class="task">
                            <label for="${id}">
                                <input onclick="updateStatus(this)" type="checkbox" id="${id}" ${completed}>
                                <p class="${completed}">${todo.name}</p>
                            </label>
                            <div class="settings">
                                <i onclick="showMenu(this)" class="uil uil-ellipsis-h" style="color:#20665C"></i>
                                <ul class="task-menu">
                                    <li onclick='editTask(${id}, "${todo.name}")'><i class="uil uil-pen"></i>Edit</li>
                                    <li onclick='deleteTask(${id}, "${filter}")'><i class="uil uil-trash"></i>Delete</li>
                                </ul>
                            </div>
                        </li>`;
                    }
                });
            }
            taskBox.innerHTML = liTag || `<span>You don't have any task here</span>`;
            let checkTask = taskBox.querySelectorAll(".task");
            !checkTask.length ? clearAll.classList.remove("active") : clearAll.classList.add("active");
            taskBox.offsetHeight >= 300 ? taskBox.classList.add("overflow") : taskBox.classList.remove("overflow");
        }
        showTodo("all");

        function showMenu(selectedTask) {
            let menuDiv = selectedTask.parentElement.lastElementChild;
            menuDiv.classList.add("show");
            document.addEventListener("click", e => {
                if (e.target.tagName !== "I" || e.target !== selectedTask) {
                    menuDiv.classList.remove("show");
                }
            });
        }

        function updateStatus(selectedTask) {
            let taskName = selectedTask.parentElement.querySelector("p");
            if (selectedTask.checked) {
                taskName.classList.add("checked");
                todos[selectedTask.id].status = "completed";
            } else {
                taskName.classList.remove("checked");
                todos[selectedTask.id].status = "pending";
            }
            localStorage.setItem("todo-list", JSON.stringify(todos));
        }

        function editTask(taskId, textName) {
            editId = taskId;
            isEditTask = true;
            taskInput.value = textName;
            taskInput.focus();
            taskInput.classList.add("active");
        }

        function deleteTask(deleteId, filter) {
            isEditTask = false;
            todos.splice(deleteId, 1);
            localStorage.setItem("todo-list", JSON.stringify(todos));
            showTodo(filter);
        }

        clearAll.addEventListener("click", () => {
            isEditTask = false;
            todos.splice(0, todos.length);
            localStorage.setItem("todo-list", JSON.stringify(todos));
            showTodo("all");
        });

        taskInput.addEventListener("keyup", e => {
            let userTask = taskInput.value.trim();
            if (e.key === "Enter" && userTask) {
                if (!isEditTask) {
                    todos = !todos ? [] : todos;
                    let taskInfo = { name: userTask, status: "pending" };
                    todos.push(taskInfo);
                } else {
                    isEditTask = false;
                    todos[editId].name = userTask;
                }
                taskInput.value = "";
                localStorage.setItem("todo-list", JSON.stringify(todos));
                showTodo(document.querySelector("span.active").id);
            }
        });

        /* todo script end */

        /* mobile nav controller script starts */

        // define all UI variable
        const navToggler = document.querySelector('.nav-toggler');
        const navMenu = document.querySelector('.site-navbar ul');
        const navLinks = document.querySelectorAll('.site-navbar a');

        // load all event listners
        allEventListners();

        // functions of all event listners
        function allEventListners() {
            // toggler icon click event
            navToggler.addEventListener('click', togglerClick);
            // nav links click event
            navLinks.forEach(elem => elem.addEventListener('click', navLinkClick));
        }

        // togglerClick function
        function togglerClick() {
            navToggler.classList.toggle('toggler-open');
            navMenu.classList.toggle('open');
        }

        // navLinkClick function
        function navLinkClick() {
            if (navMenu.classList.contains('open')) {
                navToggler.click();
            }
        }

        /* mobile navcontroller script ends */
    </script>
</body>

</html>